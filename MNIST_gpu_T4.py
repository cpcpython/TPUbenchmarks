# -*- coding: utf-8 -*-
"""okGPUpytorch

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GK9NTTdubrq_jpWrDSCiOlVmDpFcI_A

RESULT: 0:00:41 sec
"""

# use this if needed; ! pip install torch_xla

import torch
from torch import nn
from torchvision import datasets
from torchvision.transforms import ToTensor

import torch.optim as optim
from torch.utils.data import DataLoader
from datetime import datetime

# --- 1. Device Setup for GPU (CUDA) ---
# Check if CUDA is available; otherwise, fall back to CPU
if torch.cuda.is_available():
    device = torch.device("cuda")
    # Optional: Use a specific GPU if multiple are available
    # device = torch.device("cuda:0")
elif torch.backends.mps.is_available():
    # For Apple Silicon GPUs
    device = torch.device("mps")
else:
    device = torch.device("cpu")

print(device)

# Adjusted batch size for common GPU usage (can be smaller than TPU batch size)
batch_size = 512

# Data loading setup (Standard Dataloader)
training_data = datasets.MNIST(root="data", train=True, download=True, transform=ToTensor())
test_data = datasets.MNIST(root="data", train=False, download=True, transform=ToTensor())
train_dataloader = DataLoader(training_data, batch_size=batch_size, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=batch_size, shuffle=False)

# --- Model Definition ---
class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10)
        )

    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits

model = NeuralNetwork().to(device) # Move model to device immediately
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)

# --- 2. GPU Training Function ---
# The function now accepts the standard DataLoader and handles tensor transfer internally.
def train(dataloader, model, loss_fn, optimizer, device):
    size = len(dataloader.dataset)
    model.train()

    # Iterate over the standard DataLoader
    for batch, (X, y) in enumerate(dataloader):

        # *** GPU/CPU STEP: Explicitly move data to the device ***
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        loss.backward()

        # *** GPU/CPU STEP: Standard optimizer update (synchronous) ***
        optimizer.step()

        optimizer.zero_grad()

        if batch % 10 == 0:
            # Use loss.item() to retrieve value (standard practice for logging)
            loss_val, current = loss.item(), (batch + 1) * len(X)
            print(f"loss: {loss_val:>7f}  [{current:>5d}/{size:>5d}]")

# --- 3. GPU Testing Function ---
# The function now accepts the standard DataLoader and handles tensor transfer internally.
def test(dataloader, model, loss_fn, device):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:

            # *** GPU/CPU STEP: Explicitly move data to the device ***
            X, y = X.to(device), y.to(device)

            pred = model(X)

            # Use .item() to move computed loss back to host for aggregation
            test_loss += loss_fn(pred, y).item()

            # Ensure comparison and summation happen on the host CPU for aggregation
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()

    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

# --- Execution Loop ---
t1=datetime.now()
epochs = 5
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")

    # Pass the standard DataLoader directly
    train(train_dataloader, model, loss_fn, optimizer, device)

    # Pass the standard DataLoader directly
    test(test_dataloader, model, loss_fn, device)

print("Done!")
t2=datetime.now()
print(f"Total time taken: {t2 - t1}")

